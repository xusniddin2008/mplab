

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Feb 28 15:17:18 2020

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1  0000                     
      + 0000                     
     2                           ; Version 2.00
     3                           ; Generated 27/05/2018 GMT
     4                           
     5                           ; 
     6                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
     7                           ; All rights reserved.
     8                           ; 
     9                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
                                 ip").
    10                           ; 
    11                           ; Redistribution and use in source and binary forms, with or without modification, are
    12                           ; permitted provided that the following conditions are met:
    13                           ; 
    14                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
                                 t of
    15                           ;        conditions and the following disclaimer.
    16                           ; 
    17                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
                                 list
    18                           ;        of conditions and the following disclaimer in the documentation and/or other
    19                           ;        materials provided with the distribution.
    20                           ; 
    21                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
                                 is
    22                           ;        software without specific prior written permission.
    23                           ; 
    24                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,

    25                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
                                 OR
    26                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
                                 T,
    27                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                 
    28                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
                                 
    29                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
                                 RICT
    30                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
                                 SE OF
    31                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    32                           ; 
    33                           
    34                           
    35                           ; 
    36                           ; Code-generator required, PIC16F716 Definitions
    37                           ; 
    38  0004                     fsr0 equ 04h
    39  0004                     indf equ 00h
    40  0000                     indf0 equ 00h
    41  0000                     pc equ 02h
    42  0002                     pcl equ 02h
    43  0002                     pclath equ 0Ah
    44  000A                     status equ 03h
    45  0003                     
     2                           opt pagewidth 120
     3  0000                     byte0	macro	val
     4                           	(getbyte(val,0))
     5                           endm
     6  0000                     byte1	macro	val
     7                           	(getbyte(val,1))
     8                           endm
     9  0000                     byte2	macro	val
    10                           	(getbyte(val,2))
    11                           endm
    12  0000                     byte3	macro	val
    13                           	(getbyte(val,3))
    14                           endm
    15  0000                     byte4	macro	val
    16                           	(getbyte(val,4))
    17                           endm
    18  0000                     byte5	macro	val
    19                           	(getbyte(val,5))
    20                           endm
    21  0000                     byte6	macro	val
    22                           	(getbyte(val,6))
    23                           endm
    24  0000                     byte7	macro	val
    25                           	(getbyte(val,7))
    26                           endm
    27  0000                     getword	macro	val,pos
    28                           	(((val) >> (8 * pos)) and 0xffff)
    29                           endm
    30  0000                     word0	macro	val
    31                           	(getword(val,0))
    32                           endm
    33  0000                     word1	macro	val
    34                           	(getword(val,2))
    35                           endm
    36  0000                     word2	macro	val
    37                           	(getword(val,4))
    38                           endm
    39  0000                     word3	macro	val
    40                           	(getword(val,6))
    41                           endm
    42  0000                     gettword	macro	val,pos
    43                           	(((val) >> (8 * pos)) and 0xffffff)
    44                           endm
    45  0000                     tword0	macro	val
    46                           	(gettword(val,0))
    47                           endm
    48  0000                     tword1	macro	val
    49                           	(gettword(val,3))
    50                           endm
    51  0000                     tword2	macro	val
    52                           	(gettword(val,6))
    53                           endm
    54  0000                     getdword	macro	val,pos
    55                           	(((val) >> (8 * pos)) and 0xffffffff)
    56                           endm
    57  0000                     dword0	macro	val
    58                           	(getdword(val,0))
    59                           endm
    60  0000                     dword1	macro	val
    61                           	(getdword(val,4))
    62                           endm
    63  0000                     clrc	macro
    64                           	bcf	3,0
    65                           	endm
    66  0000                     clrz	macro
    67                           	bcf	3,2
    68                           	endm
    69  0000                     setc	macro
    70                           	bsf	3,0
    71                           	endm
    72  0000                     setz	macro
    73                           	bsf	3,2
    74                           	endm
    75  0000                     skipc	macro
    76                           	btfss	3,0
    77                           	endm
    78  0000                     skipz	macro
    79                           	btfss	3,2
    80                           	endm
    81  0000                     skipnc	macro
    82                           	btfsc	3,0
    83                           	endm
    84  0000                     skipnz	macro
    85                           	btfsc	3,2
    86                           	endm
    87  0000                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
    88                           INDF equ 00h ;# 
    89  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
    90                           TMR0 equ 01h ;# 
    91  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
    92                           PCL equ 02h ;# 
    93  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
    94                           STATUS equ 03h ;# 
    95  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
    96                           FSR equ 04h ;# 
    97  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
    98                           PORTA equ 05h ;# 
    99  0005                     # 212 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   100                           PORTB equ 06h ;# 
   101  0006                     # 217 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   102                           DATACCP equ 06h ;# 
   103  0006                     # 366 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   104                           PCLATH equ 0Ah ;# 
   105  000A                     # 386 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   106                           INTCON equ 0Bh ;# 
   107  000B                     # 464 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   108                           PIR1 equ 0Ch ;# 
   109  000C                     # 503 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   110                           TMR1 equ 0Eh ;# 
   111  000E                     # 510 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   112                           TMR1L equ 0Eh ;# 
   113  000E                     # 517 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   114                           TMR1H equ 0Fh ;# 
   115  000F                     # 524 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   116                           T1CON equ 010h ;# 
   117  0010                     # 590 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   118                           TMR2 equ 011h ;# 
   119  0011                     # 597 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   120                           T2CON equ 012h ;# 
   121  0012                     # 668 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   122                           CCPR1 equ 015h ;# 
   123  0015                     # 675 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   124                           CCPR1L equ 015h ;# 
   125  0015                     # 682 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   126                           CCPR1H equ 016h ;# 
   127  0016                     # 689 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   128                           CCP1CON equ 017h ;# 
   129  0017                     # 771 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   130                           PWM1CON equ 018h ;# 
   131  0018                     # 841 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   132                           ECCPAS equ 019h ;# 
   133  0019                     # 919 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   134                           ADRES equ 01Eh ;# 
   135  001E                     # 939 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   136                           ADCON0 equ 01Fh ;# 
   137  001F                     # 1035 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   138                           OPTION_REG equ 081h ;# 
   139  0081                     # 1105 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   140                           TRISA equ 085h ;# 
   141  0085                     # 1149 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   142                           TRISB equ 086h ;# 
   143  0086                     # 1154 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   144                           TRISCP equ 086h ;# 
   145  0086                     # 1303 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   146                           PIE1 equ 08Ch ;# 
   147  008C                     # 1342 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   148                           PCON equ 08Eh ;# 
   149  008E                     # 1384 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   150                           PR2 equ 092h ;# 
   151  0092                     # 1391 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f716.h"
   152                           ADCON1 equ 09Fh ;# 
   153  009F                     	FNCALL	_main,_segchar
   154                           	FNROOT	_main
   155                           	global	_TMR0
   156                           _TMR0	set	0x1
   157  0001                     	global	_INTCON
   158                           _INTCON	set	0xB
   159  000B                     	global	_PORTA
   160                           _PORTA	set	0x5
   161  0005                     	global	_PORTB
   162                           _PORTB	set	0x6
   163  0006                     	global	_OPTION_REG
   164                           _OPTION_REG	set	0x81
   165  0081                     	global	_TRISB
   166                           _TRISB	set	0x86
   167  0086                     	global	_TRISA
   168                           _TRISA	set	0x85
   169  0085                     ; #config settings
   170                           global __CFG_FOSC$HS
   171                           __CFG_FOSC$HS equ 0x0
   172  0000                     global __CFG_WDTE$OFF
   173                           __CFG_WDTE$OFF equ 0x0
   174  0000                     global __CFG_PWRTE$OFF
   175                           __CFG_PWRTE$OFF equ 0x0
   176  0000                     global __CFG_BOREN$OFF
   177                           __CFG_BOREN$OFF equ 0x0
   178  0000                     global __CFG_BODENV$40
   179                           __CFG_BODENV$40 equ 0x0
   180  0000                     global __CFG_CP$ON
   181                           __CFG_CP$ON equ 0x0
   182  0000                     	file	"C:\Users\XUSNID~1\AppData\Local\Temp\s3r4."
   183                           	line	#
   184                           psect cinit,class=CODE,delta=2
   185                           global start_initialization
   186                           start_initialization:
   187  07F9                     
   188                           global __initialization
   189                           __initialization:
   190  07F9                     psect	bssCOMMON,class=COMMON,space=1,noexec
   191                           global __pbssCOMMON
   192                           __pbssCOMMON:
   193  0077                     _R4:
   194  0077                            ds      1
   195  0077                     
   196                           _R3:
   197  0078                            ds      1
   198  0078                     
   199                           _R2:
   200  0079                            ds      1
   201  0079                     
   202                           _R1:
   203  007A                            ds      1
   204  007A                     
   205                           _n_count:
   206  007B                            ds      1
   207  007B                     
   208                           	file	"C:\Users\XUSNID~1\AppData\Local\Temp\s3r4."
   209                           	line	#
   210                           ; Clear objects allocated to COMMON
   211                           psect cinit,class=CODE,delta=2,merge=1
   212                           	clrf	((__pbssCOMMON)+0)&07Fh
   213  07F9  01F7               	clrf	((__pbssCOMMON)+1)&07Fh
   214  07FA  01F8               	clrf	((__pbssCOMMON)+2)&07Fh
   215  07FB  01F9               	clrf	((__pbssCOMMON)+3)&07Fh
   216  07FC  01FA               	clrf	((__pbssCOMMON)+4)&07Fh
   217  07FD  01FB               psect cinit,class=CODE,delta=2,merge=1
   218                           global end_of_initialization,__end_of__initialization
   219                           
   220                           ;End of C runtime variable initialization code
   221                           
   222                           end_of_initialization:
   223  07FE                     __end_of__initialization:
   224  07FE                     clrf status
   225  07FE  0183               ljmp _main	;jump to C main() function
   226  07FF  2FB9               psect	cstackCOMMON,class=COMMON,space=1,noexec
   227                           global __pcstackCOMMON
   228                           __pcstackCOMMON:
   229  0070                     ?_segchar:	; 1 bytes @ 0x0
   230  0070                     ?_main:	; 1 bytes @ 0x0
   231  0070                     	global	segchar@seg
   232                           segchar@seg:	; 2 bytes @ 0x0
   233  0070                     	ds	2
   234  0070                     ??_segchar:	; 1 bytes @ 0x2
   235  0072                     ??_main:	; 1 bytes @ 0x2
   236  0072                     	ds	3
   237  0072                     	global	main@i
   238                           main@i:	; 2 bytes @ 0x5
   239  0075                     	ds	2
   240  0075                     ;!
   241                           ;!Data Sizes:
   242                           ;!    Strings     0
   243                           ;!    Constant    0
   244                           ;!    Data        0
   245                           ;!    BSS         5
   246                           ;!    Persistent  0
   247                           ;!    Stack       0
   248                           ;!
   249                           ;!Auto Spaces:
   250                           ;!    Space          Size  Autos    Used
   251                           ;!    COMMON           14      7      12
   252                           ;!    BANK0            80      0       0
   253                           ;!    BANK1            32      0       0
   254                           
   255                           ;!
   256                           ;!Pointer List with Targets:
   257                           ;!
   258                           ;!    None.
   259                           
   260                           
   261                           ;!
   262                           ;!Critical Paths under _main in COMMON
   263                           ;!
   264                           ;!    _main->_segchar
   265                           ;!
   266                           ;!Critical Paths under _main in BANK0
   267                           ;!
   268                           ;!    None.
   269                           ;!
   270                           ;!Critical Paths under _main in BANK1
   271                           ;!
   272                           ;!    None.
   273                           
   274 ;;
   275 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   276 ;;
   277                           
   278                           ;!
   279                           ;!Call Graph Tables:
   280                           ;!
   281                           ;! ---------------------------------------------------------------------------------
   282                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   283                           ;! ---------------------------------------------------------------------------------
   284                           ;! (0) _main                                                 5     5      0     166
   285                           ;!                                              2 COMMON     5     5      0
   286                           ;!                            _segchar
   287                           ;! ---------------------------------------------------------------------------------
   288                           ;! (1) _segchar                                              2     0      2      98
   289                           ;!                                              0 COMMON     2     0      2
   290                           ;! ---------------------------------------------------------------------------------
   291                           ;! Estimated maximum stack depth 1
   292                           ;! ---------------------------------------------------------------------------------
   293                           ;!
   294                           ;! Call Graph Graphs:
   295                           ;!
   296                           ;! _main (ROOT)
   297                           ;!   _segchar
   298                           ;!
   299                           
   300                           ;! Address spaces:
   301                           
   302                           ;!Name               Size   Autos  Total    Cost      Usage
   303                           ;!BITCOMMON            E      0       0       0        0.0%
   304                           ;!NULL                 0      0       0       0        0.0%
   305                           ;!CODE                 0      0       0       0        0.0%
   306                           ;!COMMON               E      7       C       1       85.7%
   307                           ;!BITSFR0              0      0       0       1        0.0%
   308                           ;!SFR0                 0      0       0       1        0.0%
   309                           ;!BITSFR1              0      0       0       2        0.0%
   310                           ;!SFR1                 0      0       0       2        0.0%
   311                           ;!STACK                0      0       0       2        0.0%
   312                           ;!BITBANK0            50      0       0       3        0.0%
   313                           ;!BANK0               50      0       0       4        0.0%
   314                           ;!BANK1               20      0       0       5        0.0%
   315                           ;!ABS                  0      0       C       6        0.0%
   316                           ;!BITBANK1            20      0       0       7        0.0%
   317                           ;!DATA                 0      0       C       8        0.0%
   318                           
   319                           	global	_main
   320                           
   321 ;; *************** function _main *****************
   322 ;; Defined at:
   323 ;;		line 68 in file "SPEEDtest.c"
   324 ;; Parameters:    Size  Location     Type
   325 ;;		None
   326 ;; Auto vars:     Size  Location     Type
   327 ;;  i               2    5[COMMON] unsigned int 
   328 ;; Return value:  Size  Location     Type
   329 ;;                  1    wreg      void 
   330 ;; Registers used:
   331 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   332 ;; Tracked objects:
   333 ;;		On entry : B00/0
   334 ;;		On exit  : 0/0
   335 ;;		Unchanged: 0/0
   336 ;; Data sizes:     COMMON   BANK0   BANK1
   337 ;;      Params:         0       0       0
   338 ;;      Locals:         2       0       0
   339 ;;      Temps:          3       0       0
   340 ;;      Totals:         5       0       0
   341 ;;Total ram usage:        5 bytes
   342 ;; Hardware stack levels required when called:    1
   343 ;; This function calls:
   344 ;;		_segchar
   345 ;; This function is called by:
   346 ;;		Startup code after reset
   347 ;; This function uses a non-reentrant model
   348 ;;
   349                           psect	maintext,global,class=CODE,delta=2,split=1,group=0
   350                           	file	"SPEEDtest.c"
   351                           	line	68
   352                           global __pmaintext
   353                           __pmaintext:	;psect for function _main
   354  07B9                     psect	maintext
   355                           	file	"SPEEDtest.c"
   356                           	line	68
   357                           	global	__size_of_main
   358                           	__size_of_main	equ	__end_of_main-_main
   359  0040                     	
   360                           _main:	
   361  07B9                     ;incstack = 0
   362                           	opt	stack 7
   363                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   364                           	line	70
   365                           	
   366                           l668:	
   367  07B9                     ;SPEEDtest.c: 69:     unsigned int i;;SPEEDtest.c: 70:     TRISA = 0x00;
   368                           	bsf	status, 5	;RP0=1, select bank1
   369  07B9  1683               	clrf	(133)^080h	;volatile
   370  07BA  0185               	line	71
   371                           ;SPEEDtest.c: 71:     PORTA = 0x00;
   372                           	bcf	status, 5	;RP0=0, select bank0
   373  07BB  1283               	clrf	(5)	;volatile
   374  07BC  0185               	line	72
   375                           ;SPEEDtest.c: 72:     TRISB = 0x00;
   376                           	bsf	status, 5	;RP0=1, select bank1
   377  07BD  1683               	clrf	(134)^080h	;volatile
   378  07BE  0186               	line	73
   379                           ;SPEEDtest.c: 73:     PORTB = 0x00;
   380                           	bcf	status, 5	;RP0=0, select bank0
   381  07BF  1283               	clrf	(6)	;volatile
   382  07C0  0186               	line	74
   383                           	
   384                           l670:	
   385  07C1                     ;SPEEDtest.c: 74:     OPTION_REG=0b00000111;
   386                           	movlw	low(07h)
   387  07C1  3007               	bsf	status, 5	;RP0=1, select bank1
   388  07C2  1683               	movwf	(129)^080h	;volatile
   389  07C3  0081               	line	75
   390                           	
   391                           l672:	
   392  07C4                     ;SPEEDtest.c: 75:     INTCON=0xA0;
   393                           	movlw	low(0A0h)
   394  07C4  30A0               	movwf	(11)	;volatile
   395  07C5  008B               	line	76
   396                           ;SPEEDtest.c: 76:     TMR0=0;
   397                           	bcf	status, 5	;RP0=0, select bank0
   398  07C6  1283               	clrf	(1)	;volatile
   399  07C7  0181               	line	78
   400                           ;SPEEDtest.c: 78:     while(1)
   401                           	
   402                           l46:	
   403  07C8                     	line	80
   404                           ;SPEEDtest.c: 79:     {;SPEEDtest.c: 80:         for(i=0;i<5;i++)
   405                           	clrf	(main@i)
   406  07C8  01F5               	clrf	(main@i+1)
   407  07C9  01F6               	
   408                           l674:	
   409  07CA                     	movlw	0
   410  07CA  3000               	subwf	(main@i+1),w
   411  07CB  0276               	movlw	05h
   412  07CC  3005               	skipnz
   413  07CD  1903               	subwf	(main@i),w
   414  07CE  0275               	skipc
   415  07CF  1C03               	goto	u31
   416  07D0  2FD2               	goto	u30
   417  07D1  2FD3               u31:
   418  07D2                     	goto	l678
   419  07D2  2FD5               u30:
   420  07D3                     	goto	l46
   421  07D3  2FC8               	
   422                           l676:	
   423  07D4                     	goto	l46
   424  07D4  2FC8               	
   425                           l47:	
   426  07D5                     	line	82
   427                           	
   428                           l678:	
   429  07D5                     ;SPEEDtest.c: 81:         {;SPEEDtest.c: 82:           segchar(i);
   430                           	movf	(main@i+1),w
   431  07D5  0876               	movwf	(segchar@seg+1)
   432  07D6  00F1               	movf	(main@i),w
   433  07D7  0875               	movwf	(segchar@seg)
   434  07D8  00F0               	fcall	_segchar
   435  07D9  277E               	line	83
   436                           	
   437                           l680:	
   438  07DA                     ;SPEEDtest.c: 83:           _delay((unsigned long)((200)*(8000000/4000.0)));
   439                           	opt asmopt_push
   440                           opt asmopt_off
   441                           movlw  3
   442  07DA  3003               movwf	((??_main+0)+0+2),f
   443  07DB  00F4               movlw	8
   444  07DC  3008               movwf	((??_main+0)+0+1),f
   445  07DD  00F3               	movlw	119
   446  07DE  3077               movwf	((??_main+0)+0),f
   447  07DF  00F2               	u57:
   448  07E0                     decfsz	((??_main+0)+0),f
   449  07E0  0BF2               	goto	u57
   450  07E1  2FE0               	decfsz	((??_main+0)+0+1),f
   451  07E2  0BF3               	goto	u57
   452  07E3  2FE0               	decfsz	((??_main+0)+0+2),f
   453  07E4  0BF4               	goto	u57
   454  07E5  2FE0               opt asmopt_pop
   455                           
   456                           	line	84
   457                           	
   458                           l682:	
   459  07E6                     ;SPEEDtest.c: 84:         }
   460                           	movlw	01h
   461  07E6  3001               	addwf	(main@i),f
   462  07E7  07F5               	skipnc
   463  07E8  1803               	incf	(main@i+1),f
   464  07E9  0AF6               	movlw	0
   465  07EA  3000               	addwf	(main@i+1),f
   466  07EB  07F6               	
   467                           l684:	
   468  07EC                     	movlw	0
   469  07EC  3000               	subwf	(main@i+1),w
   470  07ED  0276               	movlw	05h
   471  07EE  3005               	skipnz
   472  07EF  1903               	subwf	(main@i),w
   473  07F0  0275               	skipc
   474  07F1  1C03               	goto	u41
   475  07F2  2FF4               	goto	u40
   476  07F3  2FF5               u41:
   477  07F4                     	goto	l678
   478  07F4  2FD5               u40:
   479  07F5                     	goto	l46
   480  07F5  2FC8               	
   481                           l48:	
   482  07F6                     	goto	l46
   483  07F6  2FC8               	line	106
   484                           ;SPEEDtest.c: 106:     }
   485                           	
   486                           l49:	
   487  07F7                     	goto	l46
   488  07F7  2FC8               	
   489                           l50:	
   490  07F8                     	line	108
   491                           ;SPEEDtest.c: 107:     return;
   492                           	
   493                           l51:	
   494  07F8                     	global	start
   495                           	ljmp	start
   496  07F8  2800               	opt stack 0
   497                           GLOBAL	__end_of_main
   498                           	__end_of_main:
   499  07F9                     	signat	_main,89
   500                           	global	_segchar
   501                           
   502 ;; *************** function _segchar *****************
   503 ;; Defined at:
   504 ;;		line 22 in file "SPEEDtest.c"
   505 ;; Parameters:    Size  Location     Type
   506 ;;  seg             2    0[COMMON] unsigned int 
   507 ;; Auto vars:     Size  Location     Type
   508 ;;		None
   509 ;; Return value:  Size  Location     Type
   510 ;;                  1    wreg      void 
   511 ;; Registers used:
   512 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   513 ;; Tracked objects:
   514 ;;		On entry : 0/0
   515 ;;		On exit  : 0/0
   516 ;;		Unchanged: 0/0
   517 ;; Data sizes:     COMMON   BANK0   BANK1
   518 ;;      Params:         2       0       0
   519 ;;      Locals:         0       0       0
   520 ;;      Temps:          0       0       0
   521 ;;      Totals:         2       0       0
   522 ;;Total ram usage:        2 bytes
   523 ;; Hardware stack levels used:    1
   524 ;; This function calls:
   525 ;;		Nothing
   526 ;; This function is called by:
   527 ;;		_main
   528 ;; This function uses a non-reentrant model
   529 ;;
   530                           psect	text1,local,class=CODE,delta=2,merge=1,group=0
   531                           	line	22
   532                           global __ptext1
   533                           __ptext1:	;psect for function _segchar
   534  077E                     psect	text1
   535                           	file	"SPEEDtest.c"
   536                           	line	22
   537                           	global	__size_of_segchar
   538                           	__size_of_segchar	equ	__end_of_segchar-_segchar
   539  003B                     	
   540                           _segchar:	
   541  077E                     ;incstack = 0
   542                           	opt	stack 7
   543                           ; Regs used in _segchar: [wreg-fsr0h+status,2+status,0]
   544                           	line	24
   545                           	
   546                           l634:	
   547  077E                     ;SPEEDtest.c: 22:     case 5:;SPEEDtest.c: 23:       PORTB = 0b10110110;;SPEEDtest.c: 24
                                 :       break;
   548                           	goto	l658
   549  077E  2FA8               	line	26
   550                           ;SPEEDtest.c: 25:     case 6:;SPEEDtest.c: 26:       PORTB = 0b10111110;
   551                           	
   552                           l30:	
   553  077F                     	line	27
   554                           	
   555                           l636:	
   556  077F                     ;SPEEDtest.c: 27:       break;
   557                           	movlw	low(060h)
   558  077F  3060               	bcf	status, 5	;RP0=0, select bank0
   559  0780  1283               	movwf	(6)	;volatile
   560  0781  0086               	line	28
   561                           ;SPEEDtest.c: 28:     case 7:
   562                           	goto	l41
   563  0782  2FB8               	line	29
   564                           ;SPEEDtest.c: 29:       PORTB = 0b11100000;
   565                           	
   566                           l32:	
   567  0783                     	line	30
   568                           	
   569                           l638:	
   570  0783                     ;SPEEDtest.c: 30:       break;
   571                           	movlw	low(0DAh)
   572  0783  30DA               	bcf	status, 5	;RP0=0, select bank0
   573  0784  1283               	movwf	(6)	;volatile
   574  0785  0086               	line	31
   575                           ;SPEEDtest.c: 31:     case 8:
   576                           	goto	l41
   577  0786  2FB8               	line	32
   578                           ;SPEEDtest.c: 32:       PORTB = 0b11111110;
   579                           	
   580                           l33:	
   581  0787                     	line	33
   582                           	
   583                           l640:	
   584  0787                     ;SPEEDtest.c: 33:       break;
   585                           	movlw	low(0F2h)
   586  0787  30F2               	bcf	status, 5	;RP0=0, select bank0
   587  0788  1283               	movwf	(6)	;volatile
   588  0789  0086               	line	34
   589                           ;SPEEDtest.c: 34:     case 9:
   590                           	goto	l41
   591  078A  2FB8               	line	35
   592                           ;SPEEDtest.c: 35:       PORTB = 0b11110110;
   593                           	
   594                           l34:	
   595  078B                     	line	36
   596                           	
   597                           l642:	
   598  078B                     ;SPEEDtest.c: 36:       break;
   599                           	movlw	low(066h)
   600  078B  3066               	bcf	status, 5	;RP0=0, select bank0
   601  078C  1283               	movwf	(6)	;volatile
   602  078D  0086               	line	37
   603                           ;SPEEDtest.c: 37:     case 0:
   604                           	goto	l41
   605  078E  2FB8               	line	38
   606                           ;SPEEDtest.c: 38:       PORTB = 0b11111100;
   607                           	
   608                           l35:	
   609  078F                     	line	39
   610                           	
   611                           l644:	
   612  078F                     ;SPEEDtest.c: 39:       break;
   613                           	movlw	low(0B6h)
   614  078F  30B6               	bcf	status, 5	;RP0=0, select bank0
   615  0790  1283               	movwf	(6)	;volatile
   616  0791  0086               	line	40
   617                           ;SPEEDtest.c: 40:   }
   618                           	goto	l41
   619  0792  2FB8               	line	41
   620                           ;SPEEDtest.c: 41: }
   621                           	
   622                           l36:	
   623  0793                     	line	42
   624                           	
   625                           l646:	
   626  0793                     	movlw	low(0BEh)
   627  0793  30BE               	bcf	status, 5	;RP0=0, select bank0
   628  0794  1283               	movwf	(6)	;volatile
   629  0795  0086               	line	43
   630                           	goto	l41
   631  0796  2FB8               	line	44
   632                           	
   633                           l37:	
   634  0797                     	line	45
   635                           	
   636                           l648:	
   637  0797                     	movlw	low(0E0h)
   638  0797  30E0               	bcf	status, 5	;RP0=0, select bank0
   639  0798  1283               	movwf	(6)	;volatile
   640  0799  0086               	line	46
   641                           	goto	l41
   642  079A  2FB8               	line	47
   643                           	
   644                           l38:	
   645  079B                     	line	48
   646                           	
   647                           l650:	
   648  079B                     	movlw	low(0FEh)
   649  079B  30FE               	bcf	status, 5	;RP0=0, select bank0
   650  079C  1283               	movwf	(6)	;volatile
   651  079D  0086               	line	49
   652                           	goto	l41
   653  079E  2FB8               	line	50
   654                           	
   655                           l39:	
   656  079F                     	line	51
   657                           	
   658                           l652:	
   659  079F                     	movlw	low(0F6h)
   660  079F  30F6               	bcf	status, 5	;RP0=0, select bank0
   661  07A0  1283               	movwf	(6)	;volatile
   662  07A1  0086               	line	52
   663                           	goto	l41
   664  07A2  2FB8               	line	53
   665                           	
   666                           l40:	
   667  07A3                     	line	54
   668                           	
   669                           l654:	
   670  07A3                     	movlw	low(0FCh)
   671  07A3  30FC               	bcf	status, 5	;RP0=0, select bank0
   672  07A4  1283               	movwf	(6)	;volatile
   673  07A5  0086               	line	55
   674                           	goto	l41
   675  07A6  2FB8               	line	56
   676                           	
   677                           l656:	
   678  07A7                     	goto	l41
   679  07A7  2FB8               	
   680                           l29:	
   681  07A8                     	
   682                           l658:	
   683  07A8                     	; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-s
                                 witches
   684                           ; Switch size 1, requested type "space"
   685                           ; Number of cases is 1, Range of values is 0 to 0
   686                           ; switch strategies available:
   687                           ; Name         Instructions Cycles
   688                           ; simple_byte            4     3 (average)
   689                           ; direct_byte            7     6 (fixed)
   690                           ; jumptable            260     6 (fixed)
   691                           ;	Chosen strategy is simple_byte
   692                           
   693                           	movf (segchar@seg+1),w
   694  07A8  0871               	opt asmopt_push
   695                           	opt asmopt_off
   696                           	xorlw	0^0	; case 0
   697  07A9  3A00               	skipnz
   698  07AA  1903               	goto	l726
   699  07AB  2FAD               	goto	l41
   700  07AC  2FB8               	opt asmopt_pop
   701                           	
   702                           l726:	
   703  07AD                     ; Switch size 1, requested type "space"
   704                           ; Number of cases is 10, Range of values is 0 to 9
   705                           ; switch strategies available:
   706                           ; Name         Instructions Cycles
   707                           ; direct_byte           16     6 (fixed)
   708                           ; simple_byte           31    16 (average)
   709                           ; jumptable            260     6 (fixed)
   710                           ;	Chosen strategy is direct_byte
   711                           
   712                           	movf (segchar@seg),w
   713  07AD  0870               	movwf fsr
   714  07AE  0084               	movlw	10
   715  07AF  300A               	subwf	fsr,w
   716  07B0  0204               skipnc
   717  07B1  1803               goto l41
   718  07B2  2FB8               movlw high(S728)
   719  07B3  3000               movwf pclath
   720  07B4  008A               	movlw low(S728)
   721  07B5  3001               	addwf fsr,w
   722  07B6  0704               	movwf pc
   723  07B7  0082               psect	swtext1,local,class=CONST,delta=2
   724                           global __pswtext1
   725                           __pswtext1:
   726  0001                     S728:
   727  0001                     	ljmp	l654
   728  0001  2FA3               	ljmp	l636
   729  0002  2F7F               	ljmp	l638
   730  0003  2F83               	ljmp	l640
   731  0004  2F87               	ljmp	l642
   732  0005  2F8B               	ljmp	l644
   733  0006  2F8F               	ljmp	l646
   734  0007  2F93               	ljmp	l648
   735  0008  2F97               	ljmp	l650
   736  0009  2F9B               	ljmp	l652
   737  000A  2F9F               psect	text1
   738                           
   739                           	
   740                           l31:	
   741  07B8                     	line	57
   742                           	
   743                           l41:	
   744  07B8                     	return
   745  07B8  0008               	opt stack 0
   746                           GLOBAL	__end_of_segchar
   747                           	__end_of_segchar:
   748  07B9                     	signat	_segchar,4217
   749                           global	___latbits
   750                           ___latbits	equ	0
   751  0000                     	global	btemp
   752                           	btemp set 07Eh
   753  007E                     
   754                           	DABS	1,126,2	;btemp
   755                           	global	wtemp0
   756                           	wtemp0 set btemp+0
   757  007E                     	end


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      12
    BANK0            80      0       0
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_segchar

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     166
                                              2 COMMON     5     5      0
                            _segchar
 ---------------------------------------------------------------------------------
 (1) _segchar                                              2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _segchar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      0       0       4        0.0%
BANK1               20      0       0       5        0.0%
ABS                  0      0       C       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0       C       8        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Feb 28 15:17:18 2020

             __CFG_CP$ON 0000                        pc 0002                       l30 077F  
                     l31 07B8                       l40 07A3                       l32 0783  
                     l33 0787                       l41 07B8                       l34 078B  
                     l50 07F8                       l35 078F                       l51 07F8  
                     l36 0793                       l29 07A8                       l37 0797  
                     l38 079B                       l46 07C8                       l39 079F  
                     l47 07D5                       l48 07F6                       l49 07F7  
                     _R1 007A                       _R2 0079                       _R3 0078  
                     _R4 0077                       u30 07D3                       u31 07D2  
                     u40 07F5                       u41 07F4                       u57 07E0  
                     fsr 0004                      S728 0001                      l640 0787  
                    l650 079B                      l642 078B                      l634 077E  
                    l652 079F                      l644 078F                      l636 077F  
                    l726 07AD                      l654 07A3                      l646 0793  
                    l638 0783                      l670 07C1                      l656 07A7  
                    l648 0797                      l680 07DA                      l672 07C4  
                    l658 07A8                      l682 07E6                      l674 07CA  
                    l684 07EC                      l676 07D4                      l668 07B9  
                    l678 07D5             __CFG_FOSC$HS 0000                     _TMR0 0001  
                   _main 07B9                     btemp 007E                     start 0000  
                  ?_main 0070            __CFG_WDTE$OFF 0000                    _PORTA 0005  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0086  
         __CFG_BODENV$40 0000                    main@i 0075          __end_of_segchar 07B9  
         __CFG_BOREN$OFF 0000                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07F9             __end_of_main 07F9  
                 ??_main 0072                   _INTCON 000B           __CFG_PWRTE$OFF 0000  
              ??_segchar 0072  __end_of__initialization 07FE           __pcstackCOMMON 0070  
             __pmaintext 07B9                  __ptext1 077E                  _n_count 007B  
                _segchar 077E     end_of_initialization 07FE      start_initialization 07F9  
            __pbssCOMMON 0077                ___latbits 0000               segchar@seg 0070  
              __pswtext1 0001                 ?_segchar 0070         __size_of_segchar 003B  
          __size_of_main 0040               _OPTION_REG 0081  
